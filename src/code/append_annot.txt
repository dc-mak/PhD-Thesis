// { list(xs, l1) * list(ys, l2) }
append (xs, ys)
// { ret . list (ret, l1 @ l2) }
=
if (xs == NULL) then
  // { list (NULL, []) * list (ys, l2) }
  return ys
  // { list(ys, l2) }
else
  // { l1 == v::l1' /\ xs |-> v * (xs + 1) |-> xs'
  //   * list (xs', l1')  * list(ys, l2) }
  new_tail := append(xs->tail, ys)
  // { l1 == v::l1' /\ xs |-> v * (xs + 1) |-> xs'
  //   *  list(new_tail, l1' @ l2) }
  return xs
  // { list(xs, l1 @ l2) }
